package holder;

import holder.knapsack.KProblemInstance;
import holder.util.Domain;
import hu.pj.obj.Item;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;

public class GenericProblemSpace<P extends GenericProblemInstance> extends HashMap<String,PSDimension> implements Iterable<P>{

	/**
	 *
	 */
	private static final long serialVersionUID = 20110618;

	/**
	 * keys of values of Domain objects in the problem
	 * space that do not change
	 */
	private final P template;

	//in theory to convert from arbitrary dimension values to an instance of P
	private InstanceGenerator<P> instanceGenerator;



	public P getTemplate() {
		return template;
	}

	public GenericProblemSpace(P template){
		this.template = template;
	}

	public void setInstanceGenerator(InstanceGenerator<P> generator){
		this.instanceGenerator = generator;
	}

	public static void main(String[] arg){
		Domain[] domains = new Domain[]{new Domain("list", Arrays.asList(new String[]{"a","b","c","d"})),
										//new Domain("integerInc", 3, 9, 2),
										new Domain("integerMult", 3, 9, 2, .001)};


		//GenericProblemSpace<KProblemInstance> gps = new GenericProblemSpace<KProblemInstance>(new KProblemInstance(Arrays.asList(new Item("x",1,1), new Item("y",2,3)),40));
		GenericProblemSpace<KProblemInstance> gps = new GenericProblemSpace<KProblemInstance>(new KProblemInstance(new ArrayList<Item>(),40));

		for (Domain d : domains){
			gps.put(new PSDimension(d.label,d));
		}

		int index = 0;
		for (KProblemInstance gpi : gps){
			System.out.println(index++ + ": " + gpi);
		}

	}


	public PSDimension put(PSDimension dim){
		return this.put(dim.name,dim);
	}

	@Override
	public Iterator<P> iterator() {
		return new PSIterator(this);
	}

	public interface InstanceGenerator<P>{
		P generate(P aTemplate, P thePrev, PSDimension...dims);
	}

	public P generateInstance(P template, P prev, GenericProblemSpace<P> gps, Map<String,Object> domainMap){
		P newP = (P)template.clone();
		for (Map.Entry<String, Object> entry : domainMap.entrySet()){
			newP.put(entry.getKey(), entry.getValue());
		}
		return newP;
	}

	private class PSIterator implements Iterator<P>{
		/**
		 *
		 */
		private final Map<String,Iterator<?>> itMap = new HashMap<String,Iterator<?>>();

		private final ArrayList<String> keyIterationOrder;
		private P prev;
		private final GenericProblemSpace<P> gps;
		private Map<String,Object> domainMap;
		private boolean hasNext=true;

		public PSIterator(GenericProblemSpace<P> inGps) {
			this.gps = inGps;

			//initialize all domain iterators
			for (String key : gps.keySet()){
				PSDimension dim = gps.get(key);
				itMap.put(dim.name, dim.domain.iterator());
			}

			keyIterationOrder = new ArrayList<String>(gps.keySet());

			//create initial instance from first item in each domain
			//after this we'll just increment from the previous instance
			generateNextDomainMap();
			prev = generateInstance(template, null, gps, domainMap);
		}

		@Override
		public boolean hasNext() {
			return hasNext;

		}

		public void setHasNext(boolean b){
			this.hasNext = false;
		}

		@Override
		public P next() {
			if (prev == null) throw new NoSuchElementException();
			P retVal = (P)prev.clone();
			generateNextDomainMap();
			prev = generateInstance(template, prev, gps, domainMap);
			return retVal;
		}

		private void generateNextDomainMap(){
			if (domainMap==null){
				domainMap = new HashMap<String,Object>();
				for (String key: keyIterationOrder){
					Iterator<?> it = itMap.get(key);
					domainMap.put(key, it.next());
				}
			}
			else{
				generateNextDomainMap(0);
			}
		}

		//use the previous instance and increment from there
		private void generateNextDomainMap(int currentKeyI){

			//if we need to increment past the number of 'digits'
			//then we are the end of the iteration
			if (currentKeyI >= keyIterationOrder.size()){
				setHasNext(false);
				return;
			}

			String key = keyIterationOrder.get(currentKeyI);
			Iterator<?> it = itMap.get(key);

			//if at the end of the domain iterator, then start over
			//and increment the next domain 'digit'
			if (it.hasNext()){
				domainMap.put(key, it.next());
			}
			else{
				//reset this 'digit'
				itMap.put(key,gps.get(key).domain.iterator());
				it = itMap.get(key);
				domainMap.put(key, it.next());

				//increment higher order 'digit'
				generateNextDomainMap(currentKeyI+1);
			}

		}

		@Override
		public void remove() {
			throw new UnsupportedOperationException();
		}

	}

	public int getInstanceCount() {
		int total = 1;
		for (PSDimension d : this.values()){
			total *= d.domain.getInstanceCount();
		}
		return total;
	}

}
