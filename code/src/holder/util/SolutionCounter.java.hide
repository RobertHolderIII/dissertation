package holder.util;

import holder.PSMap;
import holder.ProblemInstance;
import holder.Solution;
import holder.Solver;
import holder.tsp.TSPSolver;

import java.awt.Point;
import java.awt.Rectangle;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.swing.JFileChooser;

public class SolutionCounter {
	
	public static void main(String[] args) throws IOException{
		
		BufferedWriter out = new BufferedWriter(new FileWriter("solutionCounterOutput_" + Util.dateFormat.format(new Date()) + ".txt"));
		out.write("IdealFile\tNumberOfCities\tNumberOfUniqueSolutions\tSampleRate\tNumberOfDiscoveredSolutions\tFracOfSolutionsDiscovered");
		out.newLine();
		
		File[] idealPsmapFiles;
		if (args.length == 0){
			
			JFileChooser chooser = new JFileChooser(Util.DATA_DIR);
			chooser.setMultiSelectionEnabled(true);
			int returnVal = chooser.showOpenDialog(null);
			if(returnVal != JFileChooser.APPROVE_OPTION) System.exit(0);
			idealPsmapFiles = chooser.getSelectedFiles();
		}
		else{
			idealPsmapFiles = new File[args.length];
			for (int i = 0; i < args.length; i++){
				idealPsmapFiles[i] = new File(args[i]);
			}
		}
		
		
		final int[] sampleSizesPerUnit=new int[]{10,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
		final double UNIT = 100000.0;
	
		
		for (File file : idealPsmapFiles){
			System.out.println("Processing " + file);
			PSMap psmap = Util.loadPSMap(file);
			int numSolutions = SolutionCounter.countSolutions(psmap);
			Solver solver = new TSPSolver(psmap);
			int solutionSize = psmap.get(new ProblemInstance(Util.ORIGIN,psmap.getFixedPoints())).getFixedPoints().size() - 1;//substract one to exclude origin
			
			for (int runCount = 0; runCount < 10; runCount++){
				for (int sampleSize : sampleSizesPerUnit){
					
					int numDiscSolutions = SolutionCounter.getRandomSampleSolutions(psmap, sampleSize/UNIT, solver, psmap.getFixedPoints());
					
					out.write(file.getName() + "\t" + solutionSize + "\t" + numSolutions + "\t" + sampleSize/UNIT + "\t" + numDiscSolutions + "\t" + numDiscSolutions/(double)numSolutions);
					out.newLine();
				}
			}
			
		}
		out.flush();
		out.close();
		
	}
	
	public static Set<Point> createUnknownSampleCandidates(Rectangle problemSpace){
		Set<Point> unknownSamples = Util.convertProblemSpaceToUnknownSamples(problemSpace);
		return unknownSamples;
	}
	
	

	
	
	public static int getRandomSampleSolutions(PSMap psmap, double sampleRate, Solver solver, Collection<Point> fixedPoints){
		HashSet<Solution> solutions = new HashSet<Solution>();
	
		Set<Point> unknownSamples = createUnknownSampleCandidates(psmap.getProblemSpace());
		
		//use ceiling so we don't end up taking sample sizes of zero
		final int sampleSize = (int) Math.ceil(sampleRate * unknownSamples.size());
		
		//find solutions to sample set
		Set<Point> sampleSet = Util.getRandomSamples(unknownSamples, Math.min(unknownSamples.size(),sampleSize));
		for (Point samplePoint : sampleSet){
			ProblemInstance pi = new ProblemInstance(samplePoint, fixedPoints);
			
			solutions.add(solver.getSolution(pi));
		}//end for

		return solutions.size();
	}
	
	
	public static int countSolutions(PSMap psmap){
		HashSet<Solution> solutions = new HashSet<Solution>();
		for (Solution solution : psmap.values()){
			solutions.add(solution);
		}
		return solutions.size();
	}
	
}
