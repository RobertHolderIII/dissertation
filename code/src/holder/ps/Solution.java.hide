package holder.ps;

import java.awt.Point;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution{
    private ArrayList<Point> fixedPoints;

    public List<Point> getFixedPoints(){
	return fixedPoints;
    }

    public Solution(Point ... points){
	this(Arrays.asList(points));
    }

    public Solution(List<Point> points){
	fixedPoints = new ArrayList<Point>(points);
    }

    public double getDistance(Point variablePoint){
	double totalDistance = 0;
	for (int i = 1; i < fixedPoints.size(); i++){
	    Point p1 = fixedPoints.get(i-1) == null? variablePoint : fixedPoints.get(i-1);
	    Point p2 = fixedPoints.get(i) == null? variablePoint : fixedPoints.get(i);
	    totalDistance += p1.distance(p2);
	}
	return totalDistance;
    }

    public boolean isBetterThan(Solution otherSolution, Point variablePoint){
	return this.getDistance(variablePoint) < otherSolution.getDistance(variablePoint);
    }

    public boolean isEqualTo(Solution otherSolution, Point variablePoint){
	return this.getDistance(variablePoint) == otherSolution.getDistance(variablePoint);
    }

    @Override
    public String toString(){
    	StringBuilder sb = new StringBuilder("Solution: ");
	boolean dash = false;
    	for (Point p : fixedPoints){
	    if (dash) {
		sb.append("-");
	    }
	    else{
		dash=true;
	    }

	    sb.append(p==null?"P":("("+p.x+","+p.y+")"));
    	}
    	return sb.toString();
    }

    @Override
	public boolean equals(Object o){
	return o instanceof Solution && ((Solution)o).fixedPoints.equals(this.fixedPoints);
    }
    @Override
	public int hashCode(){
	return fixedPoints.hashCode();
    }


}//end class Solution
